# Generated by Django 4.0.5 on 2022-06-23 09:24

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Company',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('name', models.CharField(max_length=255, unique=True, verbose_name='公司名称')),
                ('uniform_social_credit_code', models.CharField(max_length=32, unique=True, verbose_name='统一社会信用代码')),
                ('address', models.CharField(max_length=255, verbose_name='公司地址')),
                ('area_code', models.CharField(max_length=32, verbose_name='注册区编码')),
                ('area_name', models.CharField(max_length=32, verbose_name='注册区名称')),
                ('form', models.CharField(max_length=32, verbose_name='企业类型')),
                ('legal_person', models.CharField(max_length=32, verbose_name='法人')),
                ('legal_person_id_card', models.CharField(max_length=32, verbose_name='法人身份证')),
                ('business_license', models.CharField(max_length=512, verbose_name='营业执照')),
                ('qualification', models.CharField(max_length=512, verbose_name='资质')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Vehicle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('plate_number', models.CharField(max_length=32, verbose_name='车牌号')),
                ('street_code', models.CharField(max_length=32, verbose_name='服务街道编码')),
                ('street_name', models.CharField(max_length=32, verbose_name='服务街道名称')),
                ('type', models.CharField(choices=[('RECYCLE', '可回收物运输车'), ('LARGE_RUBBISH', '大件垃圾运输车')], max_length=32, verbose_name='车辆类型')),
                ('energy_type', models.CharField(choices=[('OIL', '燃油'), ('NEW_ENERGY', '新能源')], max_length=32, verbose_name='能源类型')),
                ('load', models.PositiveSmallIntegerField(verbose_name='载重（t）')),
                ('meet_specification', models.BooleanField(verbose_name='是否按规范喷涂')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recycle.company')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Driver',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('name', models.CharField(max_length=32, verbose_name='姓名')),
                ('id_card', models.CharField(max_length=32, verbose_name='身份证')),
                ('phone', models.CharField(max_length=32, verbose_name='联系电话')),
                ('working_years', models.PositiveSmallIntegerField(verbose_name='从业年限')),
                ('joined_at', models.DateField(verbose_name='入职日期')),
                ('license_photo', models.CharField(max_length=255, verbose_name='驾驶证照片')),
                ('company', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='recycle.company')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='CompanyManager',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='创建时间')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='更新时间')),
                ('name', models.CharField(max_length=32, verbose_name='姓名')),
                ('id_card', models.CharField(max_length=32, verbose_name='身份证')),
                ('phone', models.CharField(max_length=32, verbose_name='联系电话')),
                ('email', models.EmailField(max_length=254)),
                ('address', models.CharField(max_length=255, verbose_name='居住地址')),
                ('id_card_front', models.CharField(max_length=255, verbose_name='身份证正面')),
                ('id_card_back', models.CharField(max_length=255, verbose_name='身份证背面')),
                ('user', models.OneToOneField(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='company',
            name='admin',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='recycle.CompanyManager'),
        ),
    ]
